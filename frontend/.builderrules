# .builderrules for Next.js Frontend Compatible with Frappe Backend
# This file guides Builder.io CLI on how to generate a Next.js frontend that integrates seamlessly with Frappe

# ===== PROJECT SETUP & ARCHITECTURE =====

# Framework Requirements
Use Next.js 13+ with App Router (NOT Pages Router)
Use TypeScript for all code with strict type checking enabled
Set up project with create-next-app using TypeScript template
Configure strict TypeScript settings in tsconfig.json

# Required Dependencies
Install and configure these essential packages:
- @tanstack/react-query (for API state management)
- @tanstack/react-query-devtools (for development)
- zustand (for client-side global state)
- react-hook-form (for form management)
- @hookform/resolvers/zod (for form validation)
- zod (for schema validation)
- tailwindcss (for styling)
- @headlessui/react (for accessible UI components)
- lucide-react (for icons)
- clsx (for conditional classes)
- class-variance-authority (for component variants)

# Project Structure
Organize code using this structure:
```
src/
├── app/                    # Next.js App Router pages
│   ├── layout.tsx         # Root layout
│   ├── page.tsx           # Home page
│   ├── globals.css        # Global styles
│   └── (auth)/            # Auth route group
├── components/            # Reusable UI components
│   ├── ui/               # Base UI components
│   ├── forms/            # Form components
│   └── layout/           # Layout components
├── hooks/                # Custom React hooks
├── lib/                  # Utility functions and configurations
├── types/                # TypeScript type definitions
└── utils/                # Helper functions
```

# ===== FRAPPE INTEGRATION REQUIREMENTS =====

# Authentication Integration
DO NOT implement custom authentication systems
Create authentication context that integrates with Frappe's session system
Check authentication status via: `/api/method/frappe.auth.get_logged_user`
Use Frappe's session cookies (automatically handled by browser)
Implement Next.js middleware for route protection as secondary layer
Handle login/logout through Frappe's authentication endpoints

# API Integration Patterns
Use ONLY relative URLs for all API calls (e.g., `/api/method/your_app.api.get_items`)
All API calls must include CSRF token in headers: `X-Frappe-CSRF-Token`
Handle Frappe's standard response format: `{message: {...}, exc: null}`
Use POST requests for most Frappe API calls (even for data fetching)
Implement proper error handling for Frappe-specific error responses
Create TypeScript interfaces for all Frappe DocType responses

# Required API Client Setup
Create a centralized API client that:
- Handles CSRF token management automatically
- Formats requests for Frappe's expected structure
- Processes Frappe's response format consistently
- Implements proper error handling and retry logic
- Integrates with React Query for caching and state management

# ===== STATE MANAGEMENT =====

# Server State Management
Use React Query (TanStack Query) as the PRIMARY and ONLY choice for server state
Configure React Query with proper defaults for Frappe integration
Implement custom hooks for common Frappe operations (get_doc, get_list, etc.)
Use React Query's caching mechanisms for optimal performance
Implement optimistic updates for better user experience

# Client State Management
Use Zustand for client-side global state management
Keep client state minimal - prefer server state when possible
Create typed stores with proper TypeScript interfaces
Implement proper state persistence when needed

# Form State Management
Use React Hook Form for ALL form handling
Integrate with Zod for schema validation
Create reusable form components that work with Frappe data structures
Implement proper error handling and validation feedback

# ===== COMPONENT DEVELOPMENT =====

# Component Architecture
Use functional components with TypeScript interfaces for all props
Implement proper prop validation with TypeScript
Create reusable components following atomic design principles
Use composition patterns over inheritance
Implement proper error boundaries for component error handling

# Component Patterns
Build components that accept data as props (avoid direct API calls in components)
Use custom hooks for data fetching and business logic
Implement proper loading states and skeleton components
Create consistent component variants using class-variance-authority
Use React.memo() for performance optimization when appropriate

# Form Components
Create form components that integrate with React Hook Form
Implement proper validation using Zod schemas
Handle Frappe-specific field types and validation rules
Create reusable form field components
Implement proper error display and user feedback

# ===== STYLING AND UI =====

# CSS Framework
Use Tailwind CSS as the primary styling solution
Configure Tailwind with a consistent design system
Create custom utility classes for common patterns
Implement responsive design with mobile-first approach
Follow accessibility guidelines (WCAG 2.1) for all components

# Component Library Integration
Use Headless UI components for accessible interactions
Create a consistent component library with proper variants
Implement proper color schemes and typography scales
Use Lucide React for consistent iconography
Create reusable layout components

# Design System
Implement consistent spacing and sizing scales
Create proper color palettes with semantic naming
Use consistent typography hierarchy
Implement proper focus states and accessibility features
Create consistent form styling and validation feedback

# ===== TYPESCRIPT INTEGRATION =====

# Type Definitions
Create TypeScript interfaces for ALL Frappe DocTypes
Define proper types for API responses and requests
Use strict TypeScript configuration with proper type checking
Create utility types for common Frappe patterns
Implement proper typing for form data and validation

# API Type Safety
Define interfaces for all Frappe API endpoints
Use discriminated unions for different response types
Implement proper error type definitions
Create type guards for runtime type checking
Use branded types for IDs and specific string formats

# Component Type Safety
Use proper TypeScript interfaces for all component props
Implement generic types for reusable components
Create proper event handler types
Use proper typing for React hooks and custom hooks
Implement proper typing for context providers

# ===== ROUTING AND NAVIGATION =====

# Next.js App Router
Use app/ directory structure for all routes
Implement proper page.tsx files for route definitions
Use loading.tsx and error.tsx for UI states
Create route groups with (groupName) for organization
Implement proper metadata configuration

# Navigation Patterns
Create navigation components that work with Frappe's URL structure
Implement proper breadcrumb navigation
Use Next.js Link component for client-side navigation
Handle deep linking and URL state management
Implement proper route protection with middleware

# ===== PERFORMANCE OPTIMIZATION =====

# Next.js Performance
Use Next.js Image component for optimized image loading
Implement proper code splitting with dynamic imports
Use React.lazy() for component-level code splitting
Optimize bundle size with proper tree shaking
Implement proper caching strategies

# React Performance
Implement proper memoization with React.memo and useMemo
Use useCallback for stable function references
Optimize re-renders with proper dependency arrays
Use proper key props for list rendering
Implement virtual scrolling for large lists when needed

# API Performance
Use React Query's caching for optimal API performance
Implement proper data prefetching strategies
Use optimistic updates for better perceived performance
Implement proper loading states and progressive enhancement
Handle offline scenarios gracefully

# ===== ERROR HANDLING =====

# Error Boundaries
Implement proper error boundaries for component error handling
Create fallback UI components for error states
Handle different types of errors appropriately
Implement proper error logging and reporting

# API Error Handling
Handle Frappe-specific error responses properly
Implement proper retry logic for failed requests
Create user-friendly error messages
Handle authentication errors and session expiration
Implement proper network error handling

# Form Error Handling
Implement proper form validation error display
Handle server-side validation errors from Frappe
Create consistent error messaging patterns
Implement proper field-level error handling

# ===== TESTING STRATEGIES =====

# Component Testing
Use Jest and React Testing Library for component tests
Test component behavior, not implementation details
Create proper test utilities and helpers
Mock API calls and external dependencies
Test accessibility and user interactions

# Integration Testing
Test integration between components and API layer
Create proper test data and fixtures
Test form submission and validation flows
Test error scenarios and edge cases
Use Mock Service Worker (MSW) for API mocking

# ===== DEVELOPMENT WORKFLOW =====

# Development Environment
Configure Next.js development server properly
Set up proper environment variable handling
Implement proper debugging configuration
Use proper linting with ESLint and Prettier
Configure proper Git hooks for code quality

# Code Organization
Follow consistent file and folder naming conventions
Use proper import/export patterns
Create proper barrel exports (index.ts files)
Implement consistent code formatting
Use proper commit message conventions

# ===== BUILD AND DEPLOYMENT PREPARATION =====

# Build Configuration
Configure next.config.js for optimal production builds
Set up proper environment variable handling for different environments
Implement proper asset optimization
Configure proper output settings for integration with Frappe
Ensure build artifacts are compatible with Frappe's asset pipeline

# Production Readiness
Implement proper error pages and fallbacks
Configure proper security headers
Implement proper performance monitoring
Create proper build scripts for CI/CD integration
Ensure compatibility with Frappe's deployment process

# ===== INTEGRATION CONSTRAINTS =====

# Technical Constraints
NO external API calls or third-party services
NO custom authentication implementations
NO client-side routing that conflicts with Frappe
NO Redux or other state management libraries (use React Query + Zustand only)
NO server-side API routes in Next.js (use Frappe backend only)

# Compatibility Requirements
All components must work with server-side rendering
All API calls must use relative URLs
All authentication must integrate with Frappe's session system
All forms must be compatible with Frappe's data structures
All routing must be compatible with Frappe's URL patterns

# Integration Points
Create proper interfaces for Frappe DocType integration
Implement proper CSRF token handling
Handle Frappe's response format consistently
Integrate with Frappe's real-time updates when needed
Ensure proper session management across the application

